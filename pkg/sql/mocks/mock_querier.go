// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rickliujh/kickstart-gogrpc/pkg/sql (interfaces: Querier)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_querier.go . Querier
//

// Package mock_sql is a generated GoMock package.
package mock_sql

import (
	context "context"
	reflect "reflect"

	sql "github.com/rickliujh/kickstart-gogrpc/pkg/sql"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
	isgomock struct{}
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CreateAuthor mocks base method.
func (m *MockQuerier) CreateAuthor(ctx context.Context, arg sql.CreateAuthorParams) (sql.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthor", ctx, arg)
	ret0, _ := ret[0].(sql.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthor indicates an expected call of CreateAuthor.
func (mr *MockQuerierMockRecorder) CreateAuthor(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthor", reflect.TypeOf((*MockQuerier)(nil).CreateAuthor), ctx, arg)
}

// DeleteAuthor mocks base method.
func (m *MockQuerier) DeleteAuthor(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthor", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthor indicates an expected call of DeleteAuthor.
func (mr *MockQuerierMockRecorder) DeleteAuthor(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthor", reflect.TypeOf((*MockQuerier)(nil).DeleteAuthor), ctx, id)
}

// GetAuthor mocks base method.
func (m *MockQuerier) GetAuthor(ctx context.Context, id int64) (sql.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthor", ctx, id)
	ret0, _ := ret[0].(sql.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthor indicates an expected call of GetAuthor.
func (mr *MockQuerierMockRecorder) GetAuthor(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthor", reflect.TypeOf((*MockQuerier)(nil).GetAuthor), ctx, id)
}

// ListAuthors mocks base method.
func (m *MockQuerier) ListAuthors(ctx context.Context) ([]sql.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAuthors", ctx)
	ret0, _ := ret[0].([]sql.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuthors indicates an expected call of ListAuthors.
func (mr *MockQuerierMockRecorder) ListAuthors(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuthors", reflect.TypeOf((*MockQuerier)(nil).ListAuthors), ctx)
}

// UpdateAuthor mocks base method.
func (m *MockQuerier) UpdateAuthor(ctx context.Context, arg sql.UpdateAuthorParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthor", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthor indicates an expected call of UpdateAuthor.
func (mr *MockQuerierMockRecorder) UpdateAuthor(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthor", reflect.TypeOf((*MockQuerier)(nil).UpdateAuthor), ctx, arg)
}
